<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FsSql</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsSql.Async">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsSqlOperators">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsSqlPrelude">

</member>
<member name="M:List.ofDataReader``1(``0)">
<summary>
 Generates a new list from the given datareader.
</summary>
</member>
<member name="T:List">

</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpTypeModule.MakeOptionType(System.Type)">
<summary>
 Creates an option type
</summary>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpTypeModule.IsList(System.Type)">
<summary>
 Returns true if type is a list
</summary>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpTypeModule.IsOption(System.Type)">
<summary>
 Returns true if type is an Option type
</summary>
</member>
<member name="T:Microsoft.FSharp.Reflection.FSharpTypeModule">

</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValueModule.|OSome|_|``1(System.Object)">
 <summary>
 Extracts value associated with an Option.
 </summary>
 <exception cref="System.ArgumentException">Argument is not an option</exception>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValueModule.|OptionType|NotOptionType|``1(``0)">
 <summary>
 OptionType if value to match is an Option, otherwise NotOptionType
 </summary>
 <exception cref="System.ArgumentException">Argument is not an option</exception>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValueModule.IsSome(System.Object)">
 <summary>
 Returns true if object is Some x
 </summary>
 <exception cref="System.ArgumentException">Argument is not an option</exception>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValueModule.IsNone(System.Object)">
 <summary>
 Returns true if object is None
 </summary>
 <exception cref="System.ArgumentException">Argument is not an option</exception>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValueModule.IsOption(System.Object)">
<summary>
 Returns true if object is of option type
</summary>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValueModule.GetOptionValue``1(System.Object)">
 <summary>
 Gets the value associated with an option
 </summary>
 <exception cref="System.NullReferenceException"><paramref value="opt"/> is null</exception>
 <exception cref="System.ArgumentException"><paramref value="opt"/> is not an option</exception>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValueModule.MakeOptionSome(System.Type,System.Object)">
 <summary>
 Creates a Some option for type <paramref name="t"/> and value <paramref name="value"/>
 </summary>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValueModule.MakeOptionNone(System.Type)">
 <summary>
 Creates a None option for type <paramref name="t"/>
 </summary>
</member>
<member name="T:Microsoft.FSharp.Reflection.FSharpValueModule">

</member>
<member name="M:Option.getOrDefault``1(Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 Maps None to a default value, otherwise the option&apos;s value
</summary>
</member>
<member name="M:Option.toDBNull``1(Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 Maps None to DBNull, otherwise the option&apos;s value
</summary>
</member>
<member name="M:Option.fromDBNull``1(System.Object)">
<summary>
 Maps DBNull to None, otherwise Some x
</summary>
</member>
<member name="T:Option">

</member>
<member name="M:Seq.groupBy123``4(System.Collections.Generic.IEnumerable{System.Tuple`4{``0,``1,``2,``3}})">
<summary>
 Groups a 4-tuple sequence by the 3 first elements in each tuple
</summary>
</member>
<member name="M:Seq.groupByFstSnd``3(System.Collections.Generic.IEnumerable{System.Tuple`3{``0,``1,``2}})">
<summary>
 Groups a 3-tuple sequence by the 2 first elements in each tuple
</summary>
</member>
<member name="M:Seq.groupByFst``2(System.Collections.Generic.IEnumerable{System.Tuple`2{``0,``1}})">
<summary>
 Groups a pair sequence by the first element in each tuple
</summary>
</member>
<member name="M:Seq.chooseSnd``3(System.Collections.Generic.IEnumerable{System.Tuple`2{``0,``1}})">
<summary>
 Returns the elements x in snd which are Some(x)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Seq.ofDataReader``1(``0)">
<summary>
 Generates a new forward-only sequence from the given datareader.
</summary>
</member>
<member name="T:Seq">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Sql.TxResult`1">
<summary>
 Transaction result
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Sql.Parameter">
<summary>
 Represents a parameter to a command
</summary>
</member>
<member name="T:Sql.ConnectionManager">
<summary>
 Encapsulates how to create and dispose a database connection
</summary>
</member>
<member name="M:Sql.recordFieldsAlias(System.Type)">
<summary>
 Gets all field names from a record type formatted with an alias.
 E.g. with a field &quot;id&quot; and alias &quot;a&quot;, returns &quot;a.id a_id&quot;
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Sql.recordValues``1(``0)">
<summary>
 Gets all field values from a record
</summary>
</member>
<member name="M:Sql.asRecord``1">
<summary>
 Maps a datarecord to a record &apos;a using an optional prefix for record field names
</summary>
</member>
<member name="M:Sql.recordFields(System.Type)">
<summary>
 Gets all field names from a record type
</summary>
</member>
<member name="M:Sql.optionalBy``2(System.String,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0)">
 <summary>
 Converts a mapper into an optional mapper. 
 Intended to be used when mapping nullable joined tables
 </summary>
 <param name="fieldName">Field to use to check for null entity</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Sql.mapOne``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDataRecord,``0},System.Data.IDataReader)">
<summary>
 Maps a datareader&apos;s single row. Throws if there isn&apos;t exactly one row
</summary>
</member>
<member name="M:Sql.mapFirst``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDataRecord,``0},System.Data.IDataReader)">
<summary>
 Maps a datareader&apos;s first row
</summary>
</member>
<member name="M:Sql.map``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDataRecord,``0},System.Data.IDataReader)">
<summary>
 Maps a datareader
</summary>
</member>
<member name="M:Sql.asyncExecSPScalar``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction},System.String,System.Collections.Generic.IEnumerable{Sql.Parameter})">
<summary>
 Executes the stored procedure asynchronously, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.
</summary>
</member>
<member name="M:Sql.asyncExecScalar``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction},System.String,System.Collections.Generic.IEnumerable{Sql.Parameter})">
<summary>
 Executes the query asynchronously, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.
</summary>
</member>
<member name="M:Sql.execSPScalar``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction},System.String,System.Collections.Generic.IEnumerable{Sql.Parameter})">
<summary>
 Executes the stored procedure, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.
</summary>
</member>
<member name="M:Sql.execScalar``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction},System.String,System.Collections.Generic.IEnumerable{Sql.Parameter})">
<summary>
 Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.
</summary>
</member>
<member name="M:Sql.mapScalar``2(``0)">
<summary>
 Maps a &lt;see cref=&quot;IDataReader&quot;/&gt; as a scalar result
</summary>
</member>
<member name="M:Sql.readString``1">
<summary>
 Reads a string field from a &lt;see cref=&quot;IDataRecord&quot;/&gt;, returns None if null, otherwise Some x
</summary>
</member>
<member name="M:Sql.readInt``1">
<summary>
 Reads an integer field from a &lt;see cref=&quot;IDataRecord&quot;/&gt;, returns None if null, otherwise Some x
</summary>
</member>
<member name="M:Sql.readField``2(System.String,``0)">
<summary>
 Reads a field from a &lt;see cref=&quot;IDataRecord&quot;/&gt;, returns None if null, otherwise Some x
</summary>
</member>
<member name="M:Sql.isNull``1(``0)">
<summary>
 True if the value is a DB null
</summary>
</member>
<member name="M:Sql.transactional2``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction},Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`3{Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction}},``0})">
<summary>
 Wraps a function in a transaction, returns a &lt;see cref=&quot;TxResult{T}&quot;/&gt;
</summary>
</member>
<member name="M:Sql.transactional``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction})">
<summary>
 Wraps a function in a transaction
</summary>
</member>
<member name="M:Sql.transactionalWithIsolation``1(System.Data.IsolationLevel,Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction},Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`3{Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction}},``0})">
<summary>
 Wraps a function in a transaction with the specified &lt;see cref=&quot;IsolationLevel&quot;/&gt;
</summary>
</member>
<member name="M:Sql.asyncExecSPNonQuery(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction})">
<summary>
 Executes a stored procedure asynchronously and returns the number of rows affected
</summary>
</member>
<member name="M:Sql.asyncExecNonQuery(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction})">
<summary>
 Executes a SQL statement asynchronously and returns the number of rows affected
</summary>
</member>
<member name="">

</member>
<member name="M:Sql.execSPNonQuery(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction})">
<summary>
 Executes a stored procedure and returns the number of rows affected
</summary>
</member>
<member name="M:Sql.execNonQuery(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction})">
<summary>
 Executes a SQL statement and returns the number of rows affected
</summary>
</member>
<member name="">

</member>
<member name="M:Sql.execNonQueryInternal``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbCommand,``0},System.Data.CommandType,Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction},System.String,``1)">
<summary>
 Executes and returns the number of rows affected
</summary>
</member>
<member name="M:Sql.asyncExecSPReader(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction})">
<summary>
 Executes a stored procedure asynchronously and returns a data reader
</summary>
</member>
<member name="M:Sql.asyncExecReader(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction})">
<summary>
 Executes a query asynchronously and returns a data reader
</summary>
</member>
<member name="M:Sql.execSPReader(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction})">
<summary>
 Executes a stored procedure and returns a data reader
</summary>
</member>
<member name="M:Sql.execReader(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction})">
<summary>
 Executes a query and returns a data reader
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Sql.execReaderInternal``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbCommand,Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit},``0}},System.Data.CommandType,Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction},System.String,``1)">
<summary>
 Executes and returns a data reader
</summary>
</member>
<member name="">

</member>
<member name="M:Sql.parameters``1(``0)">
<summary>
 Creates a list of parameters
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Sql.createCommand(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction})">
<summary>
 Creates an IDbCommand
</summary>
</member>
<member name="M:Sql.addParameter``1(``0,Sql.Parameter)">
<summary>
 Adds a parameter to a command
</summary>
</member>
<member name="M:Sql.execNonQueryF``3(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction},Microsoft.FSharp.Core.PrintfFormat{``0,``1,``2,System.Int32})">
<summary>
 Executes a printf-formatted SQL statement and returns the number of rows affected
</summary>
</member>
<member name="M:Sql.execReaderF``3(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection},Microsoft.FSharp.Core.FSharpFunc`2{System.Data.IDbConnection,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Data.IDbTransaction},Microsoft.FSharp.Core.PrintfFormat{``0,``1,``2,System.Data.IDataReader})">
<summary>
 Executes a printf-formatted query and returns a data reader
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Sql.withNewConnection(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Data.IDbConnection})">
<summary>
 Creates a &lt;see cref=&quot;ConnectionManager&quot;/&gt; with an owned connection
</summary>
</member>
<member name="M:Sql.withTransaction(System.Data.IDbTransaction)">
<summary>
 Creates a &lt;see cref=&quot;ConnectionManager&quot;/&gt; with an externally-owned transaction
</summary>
</member>
<member name="M:Sql.withConnection(System.Data.IDbConnection)">
<summary>
 Creates a &lt;see cref=&quot;ConnectionManager&quot;/&gt; with an externally-owned connection
</summary>
</member>
<member name="T:Sql">

</member>
</members>
</doc>
